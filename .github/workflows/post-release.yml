run-name: '[${{ github.ref_name }}] Post release'

on:
  release:
    types: [released]

# Only process one release at a time so we can generate cumulative results.
concurrency:
  group: post-release-workflow
  cancel-in-progress: false

permissions: {}

jobs:
  update-shipping-branch:
    name: 'Update shipping branch'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Calculate branch name
        uses: actions/github-script@98814c53be79b1d30f795b907e553d8679345975
        id: calculate-branch-name
        with:
          result-encoding: string
          script: |
            const regex = /v(?<major>\d+)\.(?<minor>\d+)\.(?<patch>\d+)/;
            const releaseVersion = regex.exec(context.payload.release.tag_name);
            if (releaseVersion == null) throw "Error: Unexpected tag format";

            return `shipped/v${releaseVersion.groups.major}.${releaseVersion.groups.minor}`;

      - name: Create or update shipped branch
        uses: actions/github-script@98814c53be79b1d30f795b907e553d8679345975
        with:
          script: |
            const branchName = `${{ steps.calculate-branch-name.outputs.result }}`;
            const refName = `heads/${branchName}`;

            // Check if the ref already exists, if so we will need to fast forward it.
            let needToCreateRef = true;
            try {
              await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: refName
              });
              needToCreateRef = false;
            } catch {
            }

            if (needToCreateRef) {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.sha,
                ref: `refs/${refName}`
              });
            } else {
              await github.rest.git.updateRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.sha,
                ref: refName,
                force: true
              });
            }

            //
            // Trigger branch mirror, empty commits and new refs will **not** trigger mirroring.
            // The simplest way of doing this is to create an empty file on the desired branch.
            //
            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: branchName,
              message: 'Trigger branch mirroring',
              path: '.mirror',
              content: ''
            });
  # Easier than trying to parse our output, just spin a managed build and analyze the output.
  calculate-supported-tfms:
    name: 'Calculated supported frameworks'
    runs-on: ubuntu-latest
    outputs:
      supported-tfms: ${{ steps.build.outputs.supported_tfms }}

    steps:
      - name: Checkout
        uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3
        with:
          persist-credentials: false

      - name: Build
        id: build
        run: |
          ./build.sh -ci -c Release -skipnative
          supported_tfms=$(ls ./artifacts/bin/dotnet-monitor/Release | grep "net" | xargs)
          echo "supported_tfms=$supported_tfms" >> "$GITHUB_OUTPUT"

  update-releases-json:
    name: 'Update release info'
    needs: calculate-supported-tfms
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      discussions: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3
        with:
          persist-credentials: true # We need to persist credentials inorder to open a PR.
          ref: manage-released-versions

      - name: Update releases.json
        uses: ./.github/actions/update-releases-json
        with:
          auth_token: ${{ secrets.GITHUB_TOKEN }}
          releases_json_file: ./.github/releases.json
          end_of_support_discussion_category: Announcements
          supported_frameworks: ${{needs.calculate-supported-tfms.outputs.supported-tfms}}

      - name: Update releases.md
        uses: ./.github/actions/update-releases-md
        with:
          releases_json_file: ./.github/releases.json
          releases_md_file: ./documentation/releases.md

      - name: Open PR
        uses: ./.github/actions/open-pr
        with:
          files_to_commit: ./.github/releases.json ./documentation/releases.md
          title: "Update releases information"
          commit_message: Update releases information
          body: Test
          branch_name: releaseInfo/trigger
          fail_if_files_unchanged: true
          auth_token: ${{ secrets.GITHUB_TOKEN }}
