name: Track shipped versions
on:
  release:
    types: [released]

permissions: {}

env:
  shipping_branch_prefix: 'shipped'

jobs:
  update-shipping-branch:
    if: github.repository == 'dotnet/dotnet-monitor'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Calculate branch name
        uses: actions/github-script@98814c53be79b1d30f795b907e553d8679345975
        id: calculate-branch-name
        with:
          result-encoding: string
          script: |
            console.log(context);
            if (context.ref_type !== "tag") throw "Error: This action only works on tags.";

            const regex = /v(?<major>\d+)\.(?<minor>\d+)\.(?<patch>\d+)/;
            const releaseVersion = regex.exec(context.payload.comment.body);
            if (releaseVersion == null) throw "Error: Unexpected tag format";

            return `v${releaseVersion.groups.major}.${releaseVersion.groups.minor}`;

      - name: Create or update shipped branch
        run: |
          const refName = `heads/${{ steps.calculate-branch-name.outputs.result }}`;

          // Check if the ref already exists, if so we will need to fast forward it.
          let needToCreateRef = true;
          try {
            await github.rest.git.getRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: refName
            });
            needToCreateRef = false;
          } catch {
          }

          if (needToCreateRef) {
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              ref: `refs/${refName}`
            });
          } else {
            await github.rest.git.updateRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              ref: `refs/${refName}`,
              force: true
            });
          }

          //
          // Create a new commit to trigger the branch mirroring.
          //

          // We want to create an empty commit, so reference the parent's tree.
          const parentCommit = await github.rest.git.updateRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
          });

          await github.rest.git.createCommit({
            owner: context.repo.owner,
            repo: context.repo.repo,
            message: 'Trigger branch mirroring',
            parents: [ context.sha ]
            tree: parentCommit.tree.sha
          });
